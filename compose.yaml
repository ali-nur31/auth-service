services:
  auth:
    container_name: auth-service
    build: .
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      postgres:
        condition: service_started
      keycloak:
        condition: service_started
    ports:
      - "${APP_PORT}:8080"
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: keycloak
    command: start-dev --http-port ${KEYCLOAK_PORT}
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KC_DB_URL: jdbc:postgresql://keycloak-db:${POSTGRES_KEYCLOAK_PORT}/${POSTGRES_KEYCLOAK_DB}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "${KEYCLOAK_PORT}:8081"
    depends_on:
      keycloak-db:
        condition: service_started

  keycloak-db:
    image: postgres:16
    container_name: keycloak-db
    environment:
      POSTGRES_DB: ${POSTGRES_KEYCLOAK_DB}
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
    volumes: [ kcdata:/var/lib/postgresql/data ]

  postgres:
    image: postgres:16
    container_name: auth-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  # Если понадобится локальный Kafka:
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   container_name: auth_zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #   ports:
  #     - "2181:2181"
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: auth_kafka
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   ports:
  #     - "9092:9092"

volumes:
  pgdata:
  kcdata: